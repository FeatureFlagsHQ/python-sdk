name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -e .

    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Format check with black
      run: |
        black --check src tests || echo "Black formatting issues found"

    - name: Import sort check with isort
      run: |
        isort --check-only src tests || echo "Import sorting issues found"

    - name: Type check with mypy
      run: |
        mypy src/featureflagshq --ignore-missing-imports || echo "Type checking issues found"

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster builds
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.12'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Test with pytest
      run: |
        pytest tests/ --tb=short -v --durations=10 || echo "Some tests failed"

    - name: Upload coverage reports to Codecov (Ubuntu + Python 3.11 only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: false
        verbose: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e .

    - name: Run bandit security scan
      run: |
        bandit -r src/featureflagshq/ || echo "Security issues found"

    - name: Run safety check
      run: |
        safety check || echo "Vulnerable dependencies found"

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7
[tox]
envlist = 
    py{38,39,310,311,312}
    lint
    security
    docs
    coverage
minversion = 4.0.0
isolated_build = true

[testenv]
deps = 
    -r{toxinidir}/requirements-test.txt
commands = 
    pytest {posargs:tests/}

[testenv:py{38,39,310,311,312}]
description = Run tests with Python {basepython}
deps = 
    {[testenv]deps}
    coverage[toml]
commands = 
    coverage run -m pytest {posargs}
    coverage report

[testenv:lint]
description = Run linting tools
deps = 
    black
    isort
    flake8
    mypy
    types-requests
    types-psutil
commands = 
    black --check src tests
    isort --check-only src tests
    flake8 src tests
    mypy src/featureflagshq

[testenv:format]
description = Format code
deps = 
    black
    isort
commands = 
    black src tests examples
    isort src tests examples

[testenv:security]
description = Run security checks
deps = 
    bandit[toml]
    safety
    pip-audit
commands = 
    bandit -r src/featureflagshq/
    safety check
    pip-audit

[testenv:docs]
description = Build documentation
deps = 
    sphinx>=6.0.0
    sphinx-rtd-theme>=1.2.0
    sphinx-autodoc-typehints>=1.20.0
    myst-parser>=1.0.0
changedir = docs
commands = 
    sphinx-build -W -b html -d {envtmpdir}/doctrees . {envtmpdir}/html

[testenv:coverage]
description = Generate coverage reports
deps = 
    {[testenv]deps}
    coverage[toml]
commands = 
    coverage run -m pytest
    coverage report --show-missing
    coverage html
    coverage xml

[testenv:build]
description = Build package
deps = 
    build
    twine
commands = 
    python -m build
    twine check dist/*

[testenv:publish-test]
description = Publish to TestPyPI
deps = 
    {[testenv:build]deps}
commands = 
    {[testenv:build]commands}
    twine upload --repository testpypi dist/*

[testenv:publish]
description = Publish to PyPI
deps = 
    {[testenv:build]deps}
commands = 
    {[testenv:build]commands}
    twine upload dist/*

[testenv:clean]
description = Clean build artifacts
deps = 
skip_install = true
commands = 
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('src/featureflagshq.egg-info', ignore_errors=True)"

# Performance testing environment
[testenv:perf]
description = Run performance tests
deps = 
    {[testenv]deps}
    pytest-benchmark
commands = 
    pytest tests/performance/ --benchmark-only

# Integration testing environment  
[testenv:integration]
description = Run integration tests
deps = 
    {[testenv]deps}
    responses
setenv = 
    FEATUREFLAGSHQ_TEST_MODE = integration
commands = 
    pytest tests/integration/ -v

# Development environment
[testenv:dev]
description = Development environment
deps = 
    -r{toxinidir}/requirements-dev.txt
commands = 
    python -c "print('Development environment ready!')"
    python -c "import featureflagshq; print(f'SDK version: {featureflagshq.__version__}')"

[flake8]
max-line-length = 100
extend-ignore = E203, W503, E501
exclude = 
    .tox,
    .git,
    __pycache__,
    docs/source/conf.py,
    build,
    dist,
    *.egg-info,
    .venv,
    venv

[coverage:run]
source = src
omit = 
    */tests/*
    */test_*.py
    */__init__.py
    */conftest.py

[coverage:report]
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod